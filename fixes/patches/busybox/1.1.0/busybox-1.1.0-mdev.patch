diff -uNrp busybox-1.1.0/util-linux/mdev.c busybox-1.1.0-mdev/util-linux/mdev.c
--- busybox-1.1.0/util-linux/mdev.c	2006-01-11 00:44:22.000000000 -0500
+++ busybox-1.1.0-mdev/util-linux/mdev.c	2006-01-23 13:52:57.452073605 -0500
@@ -37,29 +37,18 @@ static void make_device(char *path)
 	RESERVE_CONFIG_BUFFER(temp,PATH_MAX);
 
 	/* Try to read major/minor string */
-	
 	snprintf(temp, PATH_MAX, "%s/dev", path);
 	fd = open(temp, O_RDONLY);
 	len = read(fd, temp, PATH_MAX-1);
+	close(fd);
 	if (len<1) goto end;
 	temp[len] = 0;
-	close(fd);
 	
 	/* Determine device name, type, major and minor */
 	
 	device_name = strrchr(path, '/') + 1;
 	type = strncmp(path+5, "block/" ,6) ? S_IFCHR : S_IFBLK;
-	major = minor = 0;
-	for (s = temp; *s; s++) {
-		if (*s == ':') {
-			major = minor;
-			minor = 0;
-		} else {
-			minor *= 10;
-			minor += (*s) - '0';
-		}
-	}
-
+	if(sscanf(temp, "%d:%d", &major, &minor) != 2) goto end;
 	/* If we have a config file, look up permissions for this device */
 	
 	if (ENABLE_FEATURE_MDEV_CONF) {
@@ -180,49 +169,55 @@ static void find_dev(char *path)
 {
 	DIR *dir;
 	int len=strlen(path);
-
-	if (!(dir = opendir(path)))
-		bb_perror_msg_and_die("No %s",path);
-
-	for (;;) {
-		struct dirent *entry = readdir(dir);
-		
-		if (!entry) break;
-
-		/* Skip "." and ".." (also skips hidden files, which is ok) */
-
-		if (entry->d_name[0]=='.') continue;
-
-		if (entry->d_type == DT_DIR) {
-			snprintf(path+len, PATH_MAX-len, "/%s", entry->d_name);
-			find_dev(path);
-			path[len] = 0;
+	struct dirent *entry;
+	if ((dir = opendir(path)) != NULL) {
+		while ((entry = readdir(dir)) != NULL) {
+			/* Skip "." and ".." (also skips hidden files, which is ok) */
+			if (entry->d_name[0]=='.') continue;
+			if (!strcmp(entry->d_name, "device")) continue; /* it is a link */
+			if (!strcmp(entry->d_name, "bridge")) continue; /* it is a link */
+			/* If there's a dev entry, mknod it */
+			if (!strcmp(entry->d_name, "dev")) make_device(path);
+			else {
+				snprintf(path+len, PATH_MAX-len, "/%s", entry->d_name);
+				find_dev(path);
+				path[len] = 0;
+			}
 		}
-		
-		/* If there's a dev entry, mknod it */
-		
-		if (strcmp(entry->d_name, "dev")) make_device(path);
 	}
-	
 	closedir(dir);
 }
 
 int mdev_main(int argc, char *argv[])
 {
-	if (argc > 1) {
-		if (argc == 2 && !strcmp(argv[1],"-s")) {
-			RESERVE_CONFIG_BUFFER(temp,PATH_MAX);
-			strcpy(temp,"/sys/block");
-			find_dev(temp);
-			strcpy(temp,"/sys/class");
-			find_dev(temp);
-			if(ENABLE_FEATURE_CLEAN_UP)
-				RELEASE_CONFIG_BUFFER(temp);
-			return 0;
-		} else bb_show_usage();
-	} 
-	
-/* hotplug support goes here */
+	char *action;
+	char *env_path;
+	RESERVE_CONFIG_BUFFER(temp,PATH_MAX);
+
+	/* Scan */
+	if (argc == 2 && !strcmp(argv[1],"-s")) {
+		strcpy(temp,"/sys/block");
+		find_dev(temp);
+		strcpy(temp,"/sys/class");
+		find_dev(temp);
+		return 0;
+	}
 	
+	/* Hotplug */
+	else {
+		action = getenv("ACTION");
+		env_path = getenv("DEVPATH");
+	    if (!action || !env_path) bb_show_usage();
+		
+		if (!strcmp(action, "add")) {
+			sprintf(temp, "/sys%s", env_path);
+			make_device(temp);
+		} else if (!strcmp(action, "remove")) {
+			sprintf(temp, "%s/%s", DEV_PATH, strrchr(env_path, '/') + 1);
+			unlink(temp);
+		}
+	}
+
+	if(ENABLE_FEATURE_CLEAN_UP) RELEASE_CONFIG_BUFFER(temp);
 	return 0;
 }
