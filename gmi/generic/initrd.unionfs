#!/bin/ash

setup_unionfs(){
	if [ -n "${UNIONFS}" ] 
	then
		
		if [ -n "$UID" ]
		then
			CHANGES=$MEMORY/unionfs_changes/$UID
		else
			CHANGES=$MEMORY/unionfs_changes/default
		fi

		
		mkdir -p ${MEMORY}
		mkdir -p ${UNION}
		good_msg "Loading unionfs module"
		insmod unionfs > /dev/null 2>&1
		if [ "${UNIONFS}" != "1" ]
		then
			good_msg "mounting ${UNIONFS} to $MEMORY for unionfs support"
			mount ${UNIONFS} $MEMORY
			# mount tmpfs only in the case when changes= boot parameter was empty
			# or we were not able to mount the storage device
			ret=$?
			if [ "${ret}" -ne 0 ]
			then
				bad_msg "mount of ${UNIONFS} failed falling back to ramdisk based unionfs"
				mount -t tmpfs tmpfs $MEMORY
			fi
		else 
			good_msg "Mounting ramdisk to $MEMORY for unionfs support..."
			mount -t tmpfs tmpfs $MEMORY 
		fi 
		
		mkdir -p $CHANGES 
		mount -t unionfs -o dirs=$CHANGES=rw unionfs ${UNION}
		ret=$?
		if [ "${ret}" -ne 0 ]
		then 
			die "Can't setup union ${UNION} in  directory!"
		fi
	fi
}


# Insert a directory tree $2 to an union specified by $1
# Top-level read-write branch is specified by it's index 0
# $1 = union absolute path (starting with /)
# $2 = path to data directory
#
union_insert_dir()
{
	good_msg "Attempting union of $2 to $1"
	/sbin/unionctl $1 --add --after 0 --mode ro $2
	if [ $? = '0' ]
	then
		good_msg "Addition of $2 to $1 successful"
	fi
}


