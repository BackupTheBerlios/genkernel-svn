#!/bin/ash

findcdmount() {
	if [ "$#" -gt "0" ]
	then
		for x in $*
		do
			# Check for a block device to mount
			if [ -b "${x}" ]
			then
				good_msg "Attempting to mount CD:- ${x}"
				mount -r ${x} ${NEW_ROOT}/mnt/cdrom > /dev/null 2>&1
				if [ "$?" = '0' ]
				then
					# Check for a image key file
					if [ -e ${NEW_ROOT}/mnt/cdrom/${IMAGE_KEY} ]
					then
						REAL_ROOT="${x}"
						break
					else
						umount ${NEW_ROOT}/mnt/cdrom
					fi
				fi
			fi
		done
		if [ "${REAL_ROOT}" != '' ]
		then
			good_msg "CD medium found on ${x}"
		fi
	fi
}



cache_cd_contents() {
	# Check loop file exists and cache to ramdisk if DO_cache is enabled
	if [ "${LOOPTYPE}" != "noloop" ] && [ "${LOOPTYPE}" != "sgimips" ]
	then
		check_loop
		if [ "${DO_cache}" ]
		then
			good_msg "Copying loop file for caching..."
			cp -a ${NEW_ROOT}/mnt/cdrom/${LOOP} ${NEW_ROOT}/mnt/${LOOP}
			if [ $? -ne 0 ]
			then
				bad_msg "Failed to cache the loop file! Lack of space?"
				rm -rf ${NEW_ROOT}/mnt/livecd.* 2>/dev/null
				rm -rf ${NEW_ROOT}/mnt/zisofs 2>/dev/null
			else
				LOOPEXT='../'
			fi
		fi
	fi
}

findnfsmount() {
	if [ "${IP}" != '' ]; then
		if [ "${NFSROOT}" = '' ]; then
			# Obtain NFSIP	
			OPTIONS=`busybox dmesg | grep rootserver | sed -e "s/,/ /g"`
			for OPTION in $OPTIONS
			do
				if [ `echo $OPTION | sed -e "s/=/ /g" | cut -d " " -f 1` = 'rootserver' ]; then
					NFSIP=`echo $OPTION | sed -e "s/=/ /g" | cut -d " " -f 2`;
				fi 
			done
			
			# Obtain NFSPATH
			OPTIONS=`busybox dmesg | grep rootpath | sed -e "s/,/ /g"`	
			for OPTION in $OPTIONS
			do
				if [ `echo $OPTION | sed -e "s/=/ /g" | cut -d " " -f 1` = 'rootpath' ]; then
					NFSPATH=`echo $OPTION | sed -e "s/=/ /g" | cut -d " " -f 2`;
		 		fi 
			done
		
			# Setup NFSROOT
			if [ "${NFSIP}" != '' ] && [ "$NFSPATH" != '' ]
			then
				NFSROOT="${NFSIP}:${NFSPATH}"
			else
				bad_msg "The DHCP Server did not send a valid root-path."
				bad_msg "Please check your DHCP setup, or provide a nfsroot=<...> parameter."
			fi
		fi

		if [ "${NFSROOT}" != '' ]; then
			if [ "${CDROOT}" != '0' ]; then
				good_msg "Attempting to mount NFS CD image on ${NFSROOT}"
	                        mount -t nfs -o ro,nolock,rsize=1024,wsize=1024 ${NFSROOT} ${NEW_ROOT}/mnt/cdrom
				if [ "$?" = '0' ]; then
					REAL_ROOT="/dev/nfs"
				else
					bad_msg "NFS Mounting failed. Is the path corrent ?"
				fi
			else	
				good_msg "Attemping to mount NFS root on ${NFSROOT}"
				mount -t nfs -o ro,nolock,rsize=1024,wsize=1024 ${NFSROOT} ${NEW_ROOT}
                                if [ "$?" = '0' ]; then
					REAL_ROOT="/dev/nfs"
				else
					bad_msg "NFS Mounting failed. Is the path correct ?"
				fi
				# FIXME: Need to start portmap and the other rpc daemons in order to
				# FIXME: remount rw.
			fi

		fi
	fi
}

check_loop() {
    if [ "${LOOP}" = '' -o ! -e "mnt/cdrom/${LOOP}" ]
    then
	
	bad_msg "Invalid loop location: ${LOOP}"
	bad_msg 'Please export LOOP with a valid location, or reboot and pass a proper loop=...'
	bad_msg 'kernel command line!'
	
	run_shell
    fi
}

bootstrapCD() {
    # Locate the cdrom device with our media on it.
    [ -n "${CDROOT_DEV}" ] && DEVICES="$DEVICES ${CDROOT_DEV}" # Device specified on the command line
    DEVICES="$DEVICES /dev/cdroms/*" # CDROM DEVICES
    DEVICES="$DEVICES /dev/ide/cd/*" # CDROM DEVICES
    DEVICES="$DEVICES /dev/sr*" # UML DEVICES
    DEVICES="$DEVICES /dev/sd*" # USB Keychain
    DEVICES="$DEVICES /dev/hd*" # IDE devices
    DEVICES="$DEVICES /dev/ubd* /dev/ubd/*" # UML DEVICES
    DEVICES="$DEVICES /dev/iseries/vcd*" # iSeries Devices
	
    findcdmount $DEVICES
}


cdupdate() {
	if [ "${CDROOT}" -eq '1' ]
	then
    		if [ -x /${NEW_ROOT}/mnt/cdrom/cdupdate.sh ]
    		then
	    		good_msg "Running cdupdate.sh"
			${NEW_ROOT}/mnt/cdrom/cdupdate.sh
			if [ "$?" != '0' ]
			then
	    			splash 'verbose'
	    			bad_msg "FAILED TO EXECUTE cdupdate.sh"
	    			run_shell
			fi
		else
	    		good_msg 'No cdupdate.sh script found, skipping...'
    		fi
    	fi
}
